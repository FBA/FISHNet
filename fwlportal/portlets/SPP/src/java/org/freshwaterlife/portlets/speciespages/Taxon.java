package org.freshwaterlife.portlets.speciespages;

import java.util.ArrayList;
import javax.faces.context.FacesContext;
import javax.faces.event.ActionEvent;
import org.freshwaterlife.portlets.speciespages.taxonomy.NbnSpeciesDictionary;

/**
 * The class provides the variables and methods for passing information about
 * biological taxa about - particularly the user's currently selected taxon
 * @author KMcNicol
 */
public class Taxon {

    private String prefSciName;
    private String prefSciNameAuth;
    private String prefEnName;
    private String noviceDisplayName;
    private ArrayList<Taxon> synonyms;
    private String htmlSynonymsString; //generated by get method
    private ArrayList<Taxon> lowerTaxa;
    private String searchStr; //generated by get method
    private String nbnTvk;
    private String htmlName_en_sci; //generated by get method

    public Taxon() {
        this.prefSciName = "";
        this.prefSciNameAuth = "";
        this.prefEnName = "";
        this.searchStr = "";
        this.synonyms = new ArrayList<Taxon>();
        this.htmlSynonymsString = "";
        this.lowerTaxa = new ArrayList<Taxon>();
        this.nbnTvk = "";
        this.htmlName_en_sci = "";
    }

    public Taxon(String prefSciName) {
        this.prefSciName = prefSciName;
        this.prefSciNameAuth = "";
        this.prefEnName = "";
        this.searchStr = "";
        this.synonyms = new ArrayList();
        this.lowerTaxa = new ArrayList<Taxon>();
        this.nbnTvk = "";
    }

    /**
     * @return the prefSciName
     */
    public String getPrefSciName() {
        return prefSciName;
    }

    /**
     * @param prefSciName the prefSciName to set
     */
    public void setPrefSciName(String prefSciName) {
        this.prefSciName = prefSciName;
    }

    /**
     * @return the prefSciNameAuth
     */
    public String getPrefSciNameAuth() {
        return prefSciNameAuth;
    }

    /**
     * @param prefSciNameAuth the prefSciNameAuth to set
     */
    public void setPrefSciNameAuth(String prefSciNameAuth) {
        this.prefSciNameAuth = prefSciNameAuth;
    }

    /**
     * @return the prefEnName
     */
    public String getPrefEnName() {
        return prefEnName;
    }

    /**
     * @param prefEnName the prefEnName to set
     */
    public void setPrefEnName(String prefEnName) {
        this.prefEnName = prefEnName;
    }

    /**
     * @return the searchStr
     */
    public String getSearchStr() {
        //TODO - create the method that works out the complete search string.
        return searchStr;
    }

    /**
     * @param searchStr the searchStr to set
     */
    public void setSearchStr(String searchStr) {
        this.searchStr = searchStr;
    }

    /**
     * @return the nbnTvk
     */
    public String getNbnTvk() {
        return nbnTvk;
    }

    /**
     * @param nbnTvk the nbnTvk to set
     */
    public void setNbnTvk(String nbnTvk) {
        this.nbnTvk = nbnTvk;
    }

    /**
     * @return the synonyms
     */
    public ArrayList<Taxon> getSynonyms() {
        return synonyms;
    }

    /**
     * @param synonyms the synonyms to set
     */
    public void setSynonyms(ArrayList<Taxon> synonyms) {
        this.synonyms = synonyms;
    }

    /**
     * @return the lowerTaxa
     */
    public ArrayList<Taxon> getLowerTaxa() {
        return lowerTaxa;
    }

    /**
     * @param lowerTaxa the lowerTaxa to set
     */
    public void setLowerTaxa(ArrayList<Taxon> lowerTaxa) {
        this.lowerTaxa = lowerTaxa;
    }

    /**
     * @return the htmlSynonymsString
     */
    public String getHtmlSynonymsString() {
        String synStr = "";
        boolean hasContent = false;

        //synStr = synStr + this.synonyms.size();

        for (int i = 0; i < this.synonyms.size(); i++) {
            //synStr = synStr + "syn no. " + i;

            Taxon t = this.synonyms.get(i);

            //sci name and auth.
            if (t.getPrefSciName() != null && t.getPrefSciName().length() > 0) {
                if (hasContent) {
                    synStr = synStr + " | ";
                }

                synStr = synStr + " <em>" + t.getPrefSciName() + "</em>";


                if (t.getPrefSciNameAuth() != null && t.getPrefSciNameAuth().length() > 0) {
                    synStr = synStr + t.getPrefSciNameAuth();
                }
                hasContent = true;
            }
            //eng name
            if (t.getPrefEnName() != null && t.getPrefEnName().length() > 0) {
                if (hasContent) {
                    synStr = synStr + " | ";
                }
                synStr = synStr + t.getPrefEnName();
                hasContent = true;
            }
        }
        this.htmlSynonymsString = synStr;
        return htmlSynonymsString;
    }

    /**
     * @param htmlSynonymsString the htmlSynonymsString to set
     */
    public void setHtmlSynonymsString(String synonyms) {
        this.htmlSynonymsString = synonyms;
    }

    /**
     * @return the htmlName_en_sci
     */
    public String getHtmlName_en_sci() {
        String ret = "";
        boolean enNameSet = false;
        if (prefEnName != null && prefEnName.length() > 0) {
            ret = prefEnName;
            enNameSet = true;
        }
        if (prefSciName != null && prefSciName.length() > 0) {
            if (enNameSet) {
                ret = ret + " - <em>" + prefSciName + "</em>";
            } else {
                ret = "<em>" + prefSciName + "</em>";
            }
            if (prefSciNameAuth != null && prefSciNameAuth.length() > 0) {
                ret = ret + " " + prefSciNameAuth;
            }
        }

        this.htmlName_en_sci = ret;
        return this.htmlName_en_sci;
    }

    /**
     * @param htmlName_en_sci the htmlName_en_sci to set
     */
    public void setHtmlName_en_sci(String htmlName_en_sci) {
        this.htmlName_en_sci = htmlName_en_sci;
    }

    public void processTaxonSelction(ActionEvent event) {
        this.fillTaxonDetails();
        getCoordinator().setSelectedTaxon(this);
    }

    public void fillTaxonDetails() {
        String processingOutput = "Retrieving taxonomic information . . .<br/>";
        getCoordinator().setTaxonomyProcessingOutput(processingOutput);
        processingOutput = processingOutput + "Consulting the UK NBN/NHM Species Dictionary:<br/>";
        getCoordinator().setTaxonomyProcessingOutput(processingOutput);

        NbnSpeciesDictionary nbn = new NbnSpeciesDictionary();
        Taxon nbnResult = new Taxon();

        if (this.nbnTvk.length() > 0) {
            nbnResult = nbn.taxonDetails_tvk(nbnTvk);
        } else if (this.prefSciName.length() > 0) {
            nbnResult = nbn.taxonDetails(prefSciName);
        } else if (this.prefEnName.length() > 0) {
            nbnResult = nbn.taxonDetails(prefEnName);
        }

        if (nbnResult.nbnTvk.length() > 0) {

            if (this.nbnTvk.length() == 0) {
                this.setNbnTvk(nbnResult.getNbnTvk());
            }

            if (this.prefSciName.length() == 0) {
                this.setPrefSciName(nbnResult.getPrefSciName());
            }

            if (this.prefSciNameAuth.length() == 0) {
                this.setPrefSciNameAuth(nbnResult.getPrefSciNameAuth());
            }

            if (this.prefEnName.length() == 0) {
                this.setPrefEnName(nbnResult.getPrefEnName());
            }

            processingOutput = processingOutput + "- checking synonyms<br/>";
            getCoordinator().setTaxonomyProcessingOutput(processingOutput);

            this.synonyms = nbnResult.getSynonyms();

            processingOutput = processingOutput + "- checking lower taxa<br/>";
            getCoordinator().setTaxonomyProcessingOutput(processingOutput);

            this.lowerTaxa = nbnResult.getLowerTaxa();

        } else {
            processingOutput = "No matches were found";
        }
    }

    protected Coordinator getCoordinator() {
        return (Coordinator) getBean("coordinator");
    }

    protected Object getBean(String name) {
        FacesContext fc = FacesContext.getCurrentInstance();
        return fc.getApplication().getVariableResolver().resolveVariable(fc, name);
    }

    /**
     * @return the noviceDisplayName
     */
    public String getNoviceDisplayName() {
        if (getPrefEnName() == null || this.getPrefEnName().length() == 0) noviceDisplayName = this.getPrefSciName() + "(common name unknown)";
        else noviceDisplayName = getPrefEnName();
        return noviceDisplayName;
    }

    /**
     * @param noviceDisplayName the noviceDisplayName to set
     */
    public void setNoviceDisplayName(String noviceDisplayName) {
        this.noviceDisplayName = noviceDisplayName;
    }
}
